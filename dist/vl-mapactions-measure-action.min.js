import Overlay from"ol/src/ol/Overlay";import{unByKey}from"ol/src/ol/Observable";import{DrawAction}from"./vl-mapactions-draw-action";export class MeasureAction extends DrawAction{constructor(e,t){super(e,"LineString",()=>{unByKey(this.measurePointermoveHandler)},t);let o=0;this.layer=e,this.measureTooltips=[],this.measurePointermoveHandler=void 0,this.drawInteraction.on("drawstart",e=>{const t=o++,s=e.feature;s.setId(t);const r=document.createElement("div");r.setAttribute("class","measure-tooltip");const i=new Overlay({offset:[-15,10],positioning:"bottom-center"});this.map.addOverlay(i),this.measureTooltips[t]=i,this.measurePointermoveHandler=this.map.on("pointermove",(function(){!function(e,t,o){const s=e.getGeometry().getLength().toFixed(2);o.textContent=s+" m",t.setElement(o),t.setPosition(e.getGeometry().getLastCoordinate())}(s,i,r)}))});const s=e=>{this.map.removeOverlay(this.measureTooltips[e]),this.measureTooltips[e]=null};this.layer.getSource().on("removefeature",e=>{s(e.feature.getId())}),this.cleanUp=()=>{unByKey(this.measurePointermoveHandler);const e=[];this.measureTooltips.forEach((t,o)=>{null==this.layer.getSource().getFeatureById(o)&&e.push(o)}),e.forEach(e=>{s(e)})},this.getTooltipFor=e=>this.measureTooltips[e],this.measureOptions=t}deactivate(){this.cleanUp(),super.deactivate(this)}}
